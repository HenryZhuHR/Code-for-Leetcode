{
	// Place your Code-for-Leetcode 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Leetcode Header": {
		"scope": "cpp",
		"prefix": "leetcode_header",
		"body": [
			"#include <iostream>",
			"#include <string>",
			"#include <vector>",
			"#include <stack>",
			"#include <queue>",
			"#include <algorithm>",
			"#include <unordered_set>",
			"using namespace std;",
			""
		],
		"description": "Log output to console"
	},
	"Leetcode Tree Node": {
		"scope": "cpp",
		"prefix": "leetcode_tree_node",
		"body": [
			"/**",
			" * 二叉树的定义",
			" *   0",
			" *  / \\",
			" * 0   0",
			" */",
			"struct TreeNode",
			"{",
			"\tint       val;",
			"\tTreeNode* left;",
			"\tTreeNode* right;",
			"\tTreeNode() : val(0), left(nullptr), right(nullptr) {}",
			"\tTreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
			"\tTreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}",
			"};",
			"",
		],
		"description": "Leetcode Tree Node"
	},
	"Leetcode LinkList Node": {
		"scope": "cpp",
		"prefix": "leetcode_linkedlist_node",
		"body": [
			"/**",
			" * 单向链表",
			" */",
			"struct ListNode",
			"{",
			"\tint       val;",
			"\tListNode* next;",
			"\tListNode() : val(0), next(nullptr) {}",
			"\tListNode(int x) : val(x), next(nullptr) {}",
			"\tListNode(int x, ListNode* next) : val(x), next(next) {}",
			"};",
			""
		],
		"description": "Leetcode Tree Node"
	}
}